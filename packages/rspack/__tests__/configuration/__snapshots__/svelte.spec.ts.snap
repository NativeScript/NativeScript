// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`svelte configuration for android 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  externalsPresets: {
    node: false
  },
  devtool: 'inline-source-map',
  target: 'electron-main',
  watchOptions: {
    ignored: [
      '__jest__/platforms/**',
      '__jest__/App_Resources/**'
    ]
  },
  ignoreWarnings: [
    /System.import\\(\\) is deprecated/
  ],
  output: {
    path: '__jest__/platforms/android/app/src/main/assets/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global',
    clean: true
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      svelte$: 'svelte/internal',
      'tns-core-modules': '@nativescript/core'
    },
    extensions: [
      '.android.svelte',
      '.svelte',
      '.android.ts',
      '.ts',
      '.android.js',
      '.js',
      '.android.mjs',
      '.mjs',
      '.android.css',
      '.css',
      '.android.scss',
      '.scss',
      '.android.json',
      '.json'
    ],
    modules: [
      '__jest__/node_modules',
      'node_modules'
    ]
  },
  resolveLoader: {
    modules: [
      '__jest__/node_modules/@nativescript/webpack/dist/loaders',
      '__jest__/node_modules',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('bundle') */
      {
        enforce: 'post',
        test: '__jest__/src/app.js',
        use: [
          /* config.module.rule('bundle').use('app-css-loader') */
          {
            loader: 'app-css-loader',
            options: {
              platform: 'android'
            }
          }
        ]
      },
      /* config.module.rule('workers') */
      {
        test: /\\.(js|ts|svelte)$/,
        use: [
          /* config.module.rule('workers').use('nativescript-worker-loader') */
          {
            loader: 'nativescript-worker-loader'
          }
        ]
      },
      /* config.module.rule('ts') */
      {
        test: [
          /\\.ts$/
        ],
        use: [
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\.js$/,
        exclude: [
          /node_modules/
        ]
      },
      /* config.module.rule('xml') */
      {
        test: /\\.xml$/,
        use: [
          /* config.module.rule('xml').use('xml-namespace-loader') */
          {
            loader: 'xml-namespace-loader'
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  [
                    'postcss-import',
                    {
                      resolve: function () { /* omitted long function */ }
                    }
                  ]
                ]
              }
            }
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  [
                    'postcss-import',
                    {
                      resolve: function () { /* omitted long function */ }
                    }
                  ]
                ]
              }
            }
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      },
      /* config.module.rule('svelte') */
      {
        test: /\\.svelte$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('svelte').use('svelte-loader-hot') */
          {
            loader: 'svelte-loader-hot',
            options: {
              dev: true,
              preprocess: undefined,
              hotReload: true,
              hotOptions: {
                injectCss: false,
                'native': true
              },
              onwarn: function () { /* omitted long function */ }
            }
          }
        ]
      }
    ]
  },
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\/]node_modules[\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: false,
              sequences: false,
              keep_infinity: true,
              drop_console: false,
              global_defs: {
                __UGLIFIED__: true
              }
            },
            keep_fnames: true,
            keep_classnames: true,
            format: {
              keep_quoted_props: true
            }
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        async: false,
        typescript: {
          memoryLimit: 4096
        }
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        extensions: [
          'android'
        ]
      }
    ),
    /* config.plugin('ContextExclusionPlugin|App_Resources') */
    new ContextExclusionPlugin(
      /(.*)App_Resources(.*)/
    ),
    /* config.plugin('ContextExclusionPlugin|Other_Platforms') */
    new ContextExclusionPlugin(
      /\\.(ios|visionos)\\.(\\w+)$/
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __NS_ENV_VERBOSE__: false,
        __NS_DEV_HOST_IPS__: '["127.0.0.1","192.168.0.10"]',
        __CSS_PARSER__: '"css-tree"',
        __UI_USE_XML_PARSER__: true,
        __UI_USE_EXTERNAL_RENDERER__: false,
        __ANDROID__: true,
        __IOS__: false,
        __VISIONOS__: false,
        __APPLE__: false,
        'global.isAndroid': true,
        'global.isIOS': false,
        'global.isVisionOS': false,
        process: 'global.process'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin()
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index',
      '@nativescript/core/bundle-entry-points',
      '__jest__/src/app.js',
      '@nativescript/core/ui/frame',
      '@nativescript/core/ui/frame/activity'
    ]
  }
}"
`;

exports[`svelte configuration for ios 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  externalsPresets: {
    node: false
  },
  devtool: 'inline-source-map',
  target: 'electron-main',
  watchOptions: {
    ignored: [
      '__jest__/platforms/**',
      '__jest__/App_Resources/**'
    ]
  },
  ignoreWarnings: [
    /System.import\\(\\) is deprecated/
  ],
  output: {
    path: '__jest__/platforms/ios/jest/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global',
    clean: true
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      svelte$: 'svelte/internal',
      'tns-core-modules': '@nativescript/core'
    },
    extensions: [
      '.ios.svelte',
      '.svelte',
      '.ios.ts',
      '.ts',
      '.ios.js',
      '.js',
      '.ios.mjs',
      '.mjs',
      '.ios.css',
      '.css',
      '.ios.scss',
      '.scss',
      '.ios.json',
      '.json'
    ],
    modules: [
      '__jest__/node_modules',
      'node_modules'
    ]
  },
  resolveLoader: {
    modules: [
      '__jest__/node_modules/@nativescript/webpack/dist/loaders',
      '__jest__/node_modules',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('bundle') */
      {
        enforce: 'post',
        test: '__jest__/src/app.js',
        use: [
          /* config.module.rule('bundle').use('app-css-loader') */
          {
            loader: 'app-css-loader',
            options: {
              platform: 'ios'
            }
          }
        ]
      },
      /* config.module.rule('workers') */
      {
        test: /\\.(js|ts|svelte)$/,
        use: [
          /* config.module.rule('workers').use('nativescript-worker-loader') */
          {
            loader: 'nativescript-worker-loader'
          }
        ]
      },
      /* config.module.rule('ts') */
      {
        test: [
          /\\.ts$/
        ],
        use: [
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\.js$/,
        exclude: [
          /node_modules/
        ]
      },
      /* config.module.rule('xml') */
      {
        test: /\\.xml$/,
        use: [
          /* config.module.rule('xml').use('xml-namespace-loader') */
          {
            loader: 'xml-namespace-loader'
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  [
                    'postcss-import',
                    {
                      resolve: function () { /* omitted long function */ }
                    }
                  ]
                ]
              }
            }
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  [
                    'postcss-import',
                    {
                      resolve: function () { /* omitted long function */ }
                    }
                  ]
                ]
              }
            }
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      },
      /* config.module.rule('svelte') */
      {
        test: /\\.svelte$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('svelte').use('svelte-loader-hot') */
          {
            loader: 'svelte-loader-hot',
            options: {
              dev: true,
              preprocess: undefined,
              hotReload: true,
              hotOptions: {
                injectCss: false,
                'native': true
              },
              onwarn: function () { /* omitted long function */ }
            }
          }
        ]
      }
    ]
  },
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\/]node_modules[\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: true,
              sequences: true,
              keep_infinity: true,
              drop_console: false,
              global_defs: {
                __UGLIFIED__: true
              }
            },
            keep_fnames: true,
            keep_classnames: true,
            format: {
              keep_quoted_props: true
            }
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        async: false,
        typescript: {
          memoryLimit: 4096
        }
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        extensions: [
          'ios'
        ]
      }
    ),
    /* config.plugin('ContextExclusionPlugin|App_Resources') */
    new ContextExclusionPlugin(
      /(.*)App_Resources(.*)/
    ),
    /* config.plugin('ContextExclusionPlugin|Other_Platforms') */
    new ContextExclusionPlugin(
      /\\.(android|visionos)\\.(\\w+)$/
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __NS_ENV_VERBOSE__: false,
        __NS_DEV_HOST_IPS__: '["127.0.0.1","192.168.0.10"]',
        __CSS_PARSER__: '"css-tree"',
        __UI_USE_XML_PARSER__: true,
        __UI_USE_EXTERNAL_RENDERER__: false,
        __ANDROID__: false,
        __IOS__: true,
        __VISIONOS__: false,
        __APPLE__: true,
        'global.isAndroid': false,
        'global.isIOS': true,
        'global.isVisionOS': false,
        process: 'global.process'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin()
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index',
      '@nativescript/core/bundle-entry-points',
      '__jest__/src/app.js'
    ],
    'tns_modules/inspector_modules': [
      '@nativescript/core/inspector_modules'
    ]
  }
}"
`;
